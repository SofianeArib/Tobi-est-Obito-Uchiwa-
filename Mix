    fun{GetHeigth Note}
      local A in
	 A= {NoteToExtended Note}
	 case A
	 of silence(duration:Duration) then 0
	 else
	    if A.name==c then
	       if A.sharp then
		  ((A.octave-4)*12)-8
	       else
		  ((A.octave-4)*12)-9
	       end
	    elseif A.name==d then
	       if A.sharp then
		  ((A.octave-4)*12)-6
	       else
		  ((A.octave-4)*12)-7
	       end
	    elseif A.name==e then
	       ((A.octave-4)*12)-5
	    elseif A.name==f then
	       if A.sharp then
		  ((A.octave-4)*12)-3
	       else
		  ((A.octave-4)*12)-4
	       end
	    elseif A.name==g then
	       if A.sharp then
		  ((A.octave-4)*12)-1
	       else
		  ((A.octave-4)*12)-2
	       end
	    elseif
	       A.name==a then
	       if A.sharp then
		  ((A.octave-4)*12)+1
	       else
		  ((A.octave-4)*12)
	       end
	    else
	       ((A.octave-4)*12)+2
	    end
	 end 
      end
   end
  
   fun{GetFrequency Note}
      local Factor in
	 Factor=({IntToFloat {GetHeigth Note}}/12.0)
	 {Pow 2.0 Factor}*440.0
      end
   end

    fun{Sum A B}%Renvoie une liste de sommes éléments par éléments si les listes sont de meme tailles 
      local Tail in
	 fun{Tail A B Acc}
	    case A of nil then {Reverse Acc}
	    []HA|TA then
	       case B of HB|TB then
		  {Tail TA TB HA+HB|Acc}
	       end
	    end
	 end
	 {Tail A B nil}
      end
    end
    
    fun{Fill Gaps List}           %% égalise deux listes en completant la plus courte par des 0.0 
       local Tail in
	  fun{Tail Gaps List Acc}
	     if Gaps == 0 then {Append List {Reverse Acc}}
	     else {Tail Gaps-1 List 0.0|Acc}
	     end
	  end
	  {Tail Gaps List nil}
       end
    end
    
    fun{BigSum A B}                                  %%Somme des listes élément par élément et allonge la liste la plus courte 
       local Diff = {Length A} - {Length B} in
	  if Diff == 0 then {Sum A B}
	  elseif Diff > 0 then {Sum A {Fill Diff B}}
	  else {Sum {Fill ~Diff A} B}
	  end
       end
    end
    
    fun{NoteToSample Note}
       local TailNoteToSample in           
	  fun{TailNoteToSample Note Acc1 Acc2}
	     case {NoteToExtended Note}
	     of silence(duration:Duration) then
		if ({IntToFloat{Length Acc1}} < Duration*10.0) then
		   {TailNoteToSample Note 0.0|Acc1 Acc2}
	       else
		  {Flatten {Reverse Acc1}}
	       end
	    []note(name:Name octave:Octave sharp:Boolean duration:Duration instrument:none) then 
	       if ({IntToFloat{Length Acc1}} <Duration*10.0) then
		  {TailNoteToSample Note (0.5*{Sin 2.0*3.14159265359*{GetFrequency Note}*(Acc2/44100.0)})|Acc1 Acc2+(1.0/Duration)} %% gère le cas ou la duration est un entier quelconque. 
	       else
		  {Flatten {Reverse Acc1}}
	       end
	    end
	 end
	 {TailNoteToSample Note nil 0.0} %% voir quepass 
      end
   end
   
   fun{ChordToSample Chord}        %% risque de passer au dessus/dessous des bornes ]~1.0;1.0[ mais on ne doit pas gerer le cas dans le code, juste que ca n'arrive pas dans les exemples 
      case {ChordToExtended Chord}
      of H|T then
	 {BigSum {NoteToSample H} {ChordToSample T}}
      end
   end

   fun{Merge MusicsWithIntensities}   %% prends une liste de musique qui ont chacune une intensité associée renvoie la somme vectorielle pondérée par les intensités
      case MusicsWithIntensities of H|T then
	 case H of Int#Mus then
	    {BigSum {Multiply {Mix P2T Mus} Int} {Merge T}}
	 end
      end
   end

   
  fun{MultiplyList L Factor}
      local TailMultiplyList in
	 fun{TailMultiplyList L Factor Acc}
	    case L of nil then {Reverse Acc}
	    [] H|T then
	       {TailMultiplyList T Factor (Factor*H|Acc)}
	    end
	 end
	 {TailMultiplyList L Factor nil}
      end 
   end

  fun{Repeat Amount Music}
     local TailRepeat in
	fun{TailRepeat Amount Music Acc}
	   if Amount==0 then Acc
	   else {TailRepeat Amount-1 Music {Mix P2T Music}|Acc}
	   end
	end
	{TailRepeat Amount Music nil}
     end
  end

  fun{Loop Duration Music}
     local TailLoop TotalLength LengthMusic FreePlace Rest in
	TotalLength = {IntToFloat Duration*44100.0}
	LengthMusic = {Length {Mix Music}}
	FreePlace = TotalLength div LengthMusic
	Rest = TotalLength mod LengthMusic
	fun{TailLoop Music Acc}
	   if Rest ==0 then {Reverse Acc} end
	else
	   case {Length Music} of R2|D2 then
	      {TailLoop D2 H2|Acc}
	   end
	end
	{Append {Repeat FreePlace Music} {TailLoop Music 0.0}}
     end
  end
	      
  fun{Clip Low High Music}
     local TailClip MixedMusic in
	MixedMusic = {Mix P2T Music}
	fun{TailClip Low High MixedMusic Acc}
	   case MixedMusic of H|T then
	      if H > High then
		 {TailClip Low High T High|Acc}
	      elseif H < Low then
		 {TailClip Low High T Low|Acc}
	      else
		 {TailClip Low High T H|Acc}
	      end
	   [] nil then {Reverse Acc} end
	end
	{TailClip Low High MixedMusic nil} %% Low et High sont des float 
     end
  end	
   
   fun {Mix P2T Music}
      local TailMix in
	 fun{TailMix P2T Music Acc}
	     case Music 
	     of nil then {Reverse Acc}
	     [] H|T then
		case H
		of samples(Samples) then
		   {TailMix P2T T H|Acc}
		[]partition(Partition) then
		   case {P2T Partition}
		   of H2|T2 then
		      case H2 of X|Y then
			 {TailMix P2T T2 {Flatten {ChordToSample H2}|Acc}}
		      []note(name:Name octave:Octave sharp:Boolean duration:Duration instrument:none) then
			 {TailMix P2T T2 {Append {NoteToSample H2} Acc}}
		      end
		   end
		[]wave(FileName) then  %% à verif 
		   {Project.load H.1}
		[]merge(MusicWithIntensities) then
		[]reverse(Music2) then
		   {TailMix P2T T {Flatten {Mix P2T Music2}|Acc}}
		[]repeat(amount:Natural Music) then
		   {TailMix P2T T {Flatten {Repeat Natural Music}|Acc}}
		[]loop(seconds:Duration Music) then
		   {TailMix P2T T {Flatten {Loop Duration Music}|Acc}}
		[]clip(low:Sample1 high:Sample2 Music) then
		   
		[]echo(delay:Duration decay:Factor Music) then
		   
		[]fade(start:Duration1 out:Duration2 Music) then
		   
		[]cut(start:Duration1 finish:Duration2 Music) then
		   
		end
	     end
	 end
      end
   end
   
   fun{Fade Start Out Music}
      local TailFade DurationEchantillon NbEchStart StartFactor NbEchEnd OutFactor L in
	 DurationEchantillon = 1.0 %Durée d'un seul échantillon
	 NbEchStart = Start/DurationEchantillon %Nombre d'échantillons du début
	 StartFactor = 1.0/NbEchStart %Facteur du début
	 NbEchEnd = Out/DurationEchantillon %Nombre d'échantillons à la fin
	 OutFactor = 1.0/NbEchEnd %Facteur de la fin
	 %Ech = {Mix P2T Music}
	 L = {IntToFloat {Length Music}}
	 fun{TailFade NewFactorStart NewFactorEnd Music Acc}
	    case Music
	    of nil then {Reverse Acc}
	    [] H|T then
	       if (L - {IntToFloat {Length Music}} + 1.0 =< NbEchStart) then
		  {TailFade NewFactorStart+StartFactor NewFactorEnd T H*NewFactorStart|Acc}
	       elseif ({IntToFloat {Length Music}} - 1.0 =< NbEchEnd) then
		  {TailFade NewFactorStart NewFactorEnd-OutFactor T H*NewFactorEnd|Acc}
	       else
		  {TailFade NewFactorStart NewFactorEnd T H|Acc}
	       end
	    end
	 end
	 {TailFade 0.0 1.0 Music nil}
      end
   end
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   
   Music = {Project.load 'joy.dj.oz'}
   Start
   
   % Uncomment next line to insert your tests.
   % \insert 'tests.oz'
   % !!! Remove this before submitting.
	in
	   Start = {Time}
	   
   % Uncomment next line to run your tests.
   % {Test Mix PartitionToTimedList}
	   
   % Add variables to this list to avoid "local variable used only once"
   % warnings.
   %{ForAll [NoteToExtended Music] Wait}
	   
   % Calls your code, prints the result and outputs the result to `out.wav`.
   % You don't need to modify this.
   %{Browse {Project.run Mix PartitionToTimedList Music 'out.wav'}}
	   
   % Shows the total time to run your code.
   %{Browse {IntToFloat {Time}-Start} / 1000.0}
	end
